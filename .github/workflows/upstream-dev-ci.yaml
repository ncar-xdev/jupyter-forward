name: Upstream CI
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # Daily “At 00:00” UTC
  workflow_dispatch: # allows you to trigger the workflow run manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JUPYTER_FORWARD_ENABLE_SSH_TESTS: true
  JUPYTER_FORWARD_SSH_TEST_USER: runner
  JUPYTER_FORWARD_SSH_TEST_HOSTNAME: localhost.local
  JUPYTER_FORWARD_TEST_SHELLS: '["bash", "tcsh", "zsh", null]'

jobs:
  upstream-dev:
    name: upstream-dev
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure SSH key for localhost
        run: |
          .github/scripts/ssh_setup.sh
      - name: Install missing shells e.g. zsh and tcsh
        run: |
          sudo apt-get update
          sudo apt-get install zsh tcsh
          cat /etc/shells
      - uses: conda-incubator/setup-miniconda@v2
        id: conda
        with:
          channels: conda-forge,nodefaults
          channel-priority: strict
          activate-environment: jupyter-forward-dev
          auto-update-conda: false
          python-version: ${{ matrix.python-version }}
          environment-file: ci/environment-upstream-dev.yml
          mamba-version: '*'
          use-mamba: true
          miniforge-variant: Mambaforge

      - name: Install jupyter-forward
        id: install
        run: |
          python -m pip install -e . --no-deps --force-reinstall
          conda list

      - name: Run Tests
        id: test
        run: |
          python -m pytest

      - name: Report Status
        if: |
          always()
          && github.ref == 'refs/heads/main'
          && (steps.conda.outcome != 'success' || steps.install.outcome != 'success' || steps.install.outcome != 'success')
        uses: actions/github-script@v6
        with:
          script: |
            const title = '⚠️ Upstream CI Failed ⚠️'
            const creator = 'github-actions[bot]'
            const issueLabel = 'CI'
            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
            const issue_body = `[Workflow Run URL](${workflow_url})\n\n`
            let foundIssue = false
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (let issue of issues.data) {
              if (
                issue.user.login === creator &&
                issue.state === 'open' &&
                issue.labels.some((label) => label.name === issueLabel)
              ) {
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: issue_body,
                })
                core.info(`Updated an existing issue: ${issue.number}.`)
                foundIssue = true
                break
              }
            }
            if (!foundIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issue_body,
                labels: [issueLabel],
              })
              core.info('Opened a new issue')
            }
